/*
 * Copyright 2023 Karlsruhe Institute of Technology.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins { 
    id "org.springframework.boot" version "3.4.0"
    id "io.freefair.lombok" version "8.11"
    id "io.freefair.maven-publish-java" version "8.11"
    id "io.spring.dependency-management" version "1.1.7" 
    id "org.owasp.dependencycheck" version "11.1.1"
    id "java"
    id "jacoco"
    // plugins for release and publishing to maven repo
    id "signing"
    id "net.researchgate.release" version "3.1.0"
    id "io.github.gradle-nexus.publish-plugin" version "2.0.0"
    id 'maven-publish'
}

description = 'Generic message consumer for RabbitMQ'
group = 'edu.kit.datamanager'

println "Running gradle version: $gradle.gradleVersion"
println "Building ${name} version: ${version}"
println "JDK version: ${JavaVersion.current()}"

repositories {
    mavenLocal() 
    mavenCentral()
}

sourceCompatibility = 1.17
targetCompatibility = 1.17

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-amqp"

    implementation "commons-io:commons-io:2.18.0"
    implementation "org.apache.httpcomponents:httpclient:4.5.14"

    implementation "edu.kit.datamanager:service-base:1.3.2"
    //driver for h2
    implementation "com.h2database:h2:2.3.232"

    testImplementation "junit:junit"
}

if (project.hasProperty('deploy')) {
    println 'Using deploy profile for building ' + project.getName()
   apply from: 'gradle/profile-deploy.gradle'
}

bootJar {
    baseName = 'generic-message-consumer'
    classifier = 'boot'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

jar {
    archiveBaseName = 'generic-message-consumer'
    // version is defined in file 'gradle.properties'
    archiveVersion = System.getenv('version')
}

jacoco {
    toolVersion = "0.8.12"
}

tasks.withType(Test) {
    // Allow access to internal methods used by powerMockito
    // Will fail with Java17
    if (!JavaVersion.current().isJava8()) {
        jvmArgs '--illegal-access=permit'
    }
    testLogging {
        events 'started', 'passed'
    }
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
    
    afterEvaluate {
        //exclude some classes/package from code coverage report
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [\
                //pure entity package currently not needed
                'org/datacite/**', \
                'org/purl/**', \
                //performance tests
                'edu/kit/datamanager/perf/**', \
                //remove AuthenticationHelper tests due to mocking -> code coverage cannot be determined
                //'edu/kit/datamanager/util/AuthenticationHelper*',
                //deprecated stuff
                'edu/kit/datamanager/util/DCTransformationHelper*',
                'edu/kit/datamanager/dao/ByExampleSpecification*',
                'edu/kit/datamanager/controller/hateoas/**',
                //exceptions 
                'edu/kit/datamanager/exceptions/**',
                'edu/kit/datamanager/service/impl/RabbitMQMessagingService*',
                'edu/kit/datamanager/configuration/**',
                'edu/kit/datamanager/service/IGenericService*'
            ])
        }))
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}
